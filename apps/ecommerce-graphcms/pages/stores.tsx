import { ApolloClient, gql, InMemoryCache } from '@apollo/client';
import Container from '@components/Container';
import Layout from '@components/Layout';
import Map, { MapEffect } from '@components/Map';
import styles from '@styles/Page.module.scss';
import center from '@turf/center';
import { points } from '@turf/helpers';
import Head from 'next/head';
import { useState } from 'react';
import { FaExternalLinkAlt } from 'react-icons/fa';

type StoresProps = {
  storeLocations: {
    id: string;
    name: string;
    phoneNumber: string;
    address: string;
    location: {
      latitude: number;
      longitude: number;
    };
  }[];
};

export default function Stores({ storeLocations }: StoresProps) {
  const [activeStore, setActiveStore] = useState<string>();

  const features = points(
    storeLocations.map(({ location }) => {
      return [location.latitude, location.longitude];
    })
  );

  const [defaultLatitude, defaultLongitude] = center(features)?.geometry
    .coordinates ?? [0, 0];

  const handleViewStoreOnMap = (id: string) => {
    setActiveStore(id);
  };

  return (
    <Layout>
      <Head>
        <title>Stores</title>
        <meta name="description" content="Generated by create next app" />
      </Head>

      <Container>
        <h1>Locations</h1>

        <div className={styles.stores}>
          <div className={styles.storesLocations}>
            <ul className={styles.locations}>
              {storeLocations.map((store) => (
                <li key={store.id}>
                  <p className={styles.locationName}>{store.name}</p>
                  <address>{store.address}</address>
                  <p>{store.phoneNumber}</p>
                  <p className={styles.locationDiscovery}>
                    <button onClick={() => handleViewStoreOnMap(store.id)}>
                      View on Map
                    </button>
                    <a
                      href={`https://www.google.be/maps/dir//${store.location.latitude},${store.location.longitude}/@${store.location.latitude},${store.location.longitude},12z`}
                      target="_blank"
                      rel="noreferrer"
                    >
                      Get Directions
                      <FaExternalLinkAlt />
                    </a>
                  </p>
                </li>
              ))}
            </ul>
          </div>

          <div className={styles.storesMap}>
            <div className={styles.storesMapContainer}>
              <Map
                className={styles.map}
                center={[defaultLatitude, defaultLongitude]}
                zoom={4}
                scrollWheelZoom={false}
              >
                {({ Marker, Popup, TileLayer }) => {
                  return (
                    <>
                      <MapEffect
                        activeStore={activeStore}
                        storeLocations={storeLocations}
                      />
                      <TileLayer
                        attribution='&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
                        url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"
                      />
                      {storeLocations.map((store) => {
                        const { latitude, longitude } = store.location;
                        return (
                          <Marker
                            key={store.id}
                            position={[latitude, longitude]}
                          >
                            <Popup>
                              <p>{store.name}</p>
                              <p>{store.address}</p>
                            </Popup>
                          </Marker>
                        );
                      })}
                    </>
                  );
                }}
              </Map>
            </div>
          </div>
        </div>
      </Container>
    </Layout>
  );
}

export async function getStaticProps() {
  const client = new ApolloClient({
    uri: 'https://api-eu-central-1.graphcms.com/v2/cl23dwaya5cng01z49zwjhdtm/master',
    cache: new InMemoryCache(),
  });

  const resp = await client.query({
    query: gql`
      query PageStores {
        storeLocations {
          id
          name
          phoneNumber
          address
          location {
            latitude
            longitude
          }
        }
      }
    `,
  });

  const storeLocations = resp.data.storeLocations;

  return {
    props: {
      storeLocations,
    },
  };
}
